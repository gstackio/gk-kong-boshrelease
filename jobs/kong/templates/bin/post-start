#!/usr/bin/env bash
<%
    require "shellwords"
    def sh_esc(x)
        Shellwords.shellescape(x)
    end

    require "uri"
    def uri_esc(x)
        URI.encode_www_form_component(x)
    end

    require "json"
    def js_esc(x)
        x.to_json
    end

    has_admin_api = p("admin.http_enabled") || p("admin.tls.enabled")
    if !has_admin_api || !spec.bootstrap
%>
# Note: this 'post-start' script contains code only on bootstrap nodes and
# when admin API is enabled.
<%
    else

        if p("admin.tls.enabled")
            adm_scheme = "https"
            adm_port = p("admin.tls.bind_port")
        else
            adm_scheme = "http"
            adm_port = p("admin.bind_port")
        end
        adm_base_uri = "#{adm_scheme}://127.0.0.1:#{uri_esc(adm_port)}"

        adm_service_uuid = p("admin.service.uuid")
        adm_service_name = "kong-admin-api"
        adm_route_uuid = p("admin.service.route_uuid")
        adm_route_path = p("admin.service.route_path")

        adm_auth_plugin_uuid = p("admin.basic_auth.plugin_uuid")
        adm_consumer_uuid = p("admin.basic_auth.consumer_uuid")
        adm_username = p("admin.basic_auth.username")
        adm_password = p("admin.basic_auth.password")
-%>

# If a command fails, in a pipeline or not, exit immediately
set -e -o pipefail

function prepend_datetime() {
  awk -W interactive '{ system("echo -n [$(date +%FT%T%z)]"); print " " $0 }'
}

exec \
    3>&1 \
    4>&2 \
    1> >(prepend_datetime >&3) \
    2> >(prepend_datetime >&4)

source "/var/vcap/packages/jq-1.6-linux/runtime.env"

readonly ADM_BASE_URI=<%= sh_esc(adm_base_uri) %>
readonly ADM_SERVICE_UUID_URLENC=<%= sh_esc(uri_esc(adm_service_uuid)) %>
readonly ADM_ROUTE_UUID_URLENC=<%= sh_esc(uri_esc(adm_route_uuid)) %>
readonly ADM_CONSUMER_UUID_URLENC=<%= sh_esc(uri_esc(adm_consumer_uuid)) %>
readonly ADM_AUTH_PLUGIN_UUID_URLENC=<%= sh_esc(uri_esc(adm_auth_plugin_uuid)) %>
readonly ADM_CONSUMER_NAME_URLENC=<%= sh_esc(uri_esc(adm_username)) %>

set -x

function request() {
    local verb=$1 uri_path=$2; shift 2

    curl -fsSL -X "${verb}" \
        --cacert "/var/vcap/jobs/kong/tls/admin_ca.crt" \
        --url "${ADM_BASE_URI}${uri_path}" \
        --header "Content-Type: application/json" \
        "$@"
}


# Create or update the Service for the Admin API
request PUT "/services/${ADM_SERVICE_UUID_URLENC}" \
    --data-raw <%= sh_esc(js_esc({
            "name" => adm_service_name,
            "url"  => adm_base_uri,
        })) %> \
    --include

# Create or update the Route for the Admin API
request PUT "/routes/${ADM_ROUTE_UUID_URLENC}" \
    --data-raw <%= sh_esc(js_esc({
            "protocols"      => [ p("proxy.tls.enabled") ? "https" : "http" ],
            "paths"          => [ adm_route_path ],
            "regex_priority" => 100,
            "service"        => { "id" => adm_service_uuid, },
        })) %> \
    --include

legacy_plugin_uuid=$(request GET "/plugins" \
    | jq --raw-output \
        --arg adm_service_uuid <%= sh_esc(adm_service_uuid) %> \
        '.data[] | select(.name == "basic-auth" and .service.id == $adm_service_uuid) | .id')

if [[ -n ${legacy_plugin_uuid} && ${legacy_plugin_uuid} != <%= sh_esc(adm_auth_plugin_uuid) %> ]]; then
    request DELETE "/plugins/${legacy_plugin_uuid}" \
        --include
fi

# Create or update the 'Basic Authentication' plugin on the Admin API Service
request PUT "/plugins/${ADM_AUTH_PLUGIN_UUID_URLENC}" \
    --data-raw <%= sh_esc(js_esc({
            "name"     => "basic-auth",
            "consumer" => nil,
            "service"  => { "id" => adm_service_uuid },
            "route"    => nil,
            "config"   => {
                "hide_credentials" => true,
            },
            "run_on"   => "first",
            "enabled"  => true,
        })) %> \
    --include

# Create or update the Consumer for the admin API
request PUT "/consumers/${ADM_CONSUMER_UUID_URLENC}" \
    --data-raw <%= sh_esc(js_esc({
            "username" => adm_username,
        })) %> \
    --include


# Create or update the basic auth Credential
(
    set +x # don't have the password leak into post-start logs
    request PUT \
        "/consumers/${ADM_CONSUMER_UUID_URLENC}/basic-auth/${ADM_CONSUMER_NAME_URLENC}" \
        --data-raw <%= sh_esc(js_esc({
                "password" => adm_password,
            })) %> \
        --output "/dev/null" # don't leak the hashed password into post-start logs
)

<% end # has_admin_api && spec.bootstrap -%>

exit 0
