#!/usr/bin/env bash
<%
    require "shellwords"
    def sh_esc(x)
        Shellwords.shellescape(x)
    end

    require "uri"
    def uri_esc(x)
        URI.encode_www_form_component(x)
    end

    require "json"
    def js_esc(x)
        x.to_json
    end

    require "securerandom"

    if p("admin.tls.enabled")
        adm_scheme = "https"
        adm_port = p("admin.tls.bind_port")
    else
        adm_scheme = "http"
        adm_port = p("admin.bind_port")
    end
    adm_base_uri = "#{adm_scheme}://127.0.0.1:#{uri_esc(adm_port)}"

    adm_service_uuid = p("admin.service.uuid")
    adm_service_name = "kong-admin-api"
    adm_route_uuid = p("admin.service.route_uuid")
    adm_route_path = p("admin.service.route_path")

    adm_consumer_uuid = p("admin.basic_auth.consumer_uuid")
    adm_username = p("admin.basic_auth.username")
    adm_password = p("admin.basic_auth.password")
-%>

# If a command fails, in a pipeline or not, exit immediately
set -e -o pipefail

function prepend_datetime() {
  awk -W interactive '{ system("echo -n [$(date +%FT%T%z)]"); print " " $0 }'
}

exec \
    3>&1 \
    4>&2 \
    1> >(prepend_datetime >&3) \
    2> >(prepend_datetime >&4)

readonly ADM_BASE_URI=<%= sh_esc(adm_base_uri) %>
readonly ADM_SERVICE_UUID_URLENC=<%= sh_esc(uri_esc(adm_service_uuid)) %>
readonly ADM_ROUTE_UUID_URLENC=<%= sh_esc(uri_esc(adm_route_uuid)) %>
readonly ADM_CONSUMER_UUID_URLENC=<%= sh_esc(uri_esc(adm_consumer_uuid)) %>
readonly ADM_CONSUMER_NAME_URLENC=<%= sh_esc(uri_esc(adm_username)) %>

set -x

<% if spec.bootstrap -%>

# Create or update the Service for the Admin API
curl -fsSL -X PUT -i \
    --cacert /var/vcap/jobs/kong/tls/admin_ca.crt \
    --url "${ADM_BASE_URI}/services/${ADM_SERVICE_UUID_URLENC}" \
    --header "Content-Type: application/json" \
    --data-raw <%= sh_esc(js_esc({
            "name" => adm_service_name,
            "url"  => adm_base_uri,
        })) %>

# Create or update the Route for the Admin API
curl -fsSL -X PUT -i \
    --cacert /var/vcap/jobs/kong/tls/admin_ca.crt \
    --url "${ADM_BASE_URI}/routes/${ADM_ROUTE_UUID_URLENC}" \
    --header "Content-Type: application/json" \
    --data-raw <%= sh_esc(js_esc({
            "protocols"      => [ "https" ],
            "paths"          => [ adm_route_path ],
            "regex_priority" => 100,
            "service" => { "id" => adm_service_uuid, },
        })) %>

existing_basic_auth_plugins=$(curl -fsSL -X GET \
    --cacert /var/vcap/jobs/kong/tls/admin_ca.crt \
    --url "${ADM_BASE_URI}/plugins?name=basic-auth&service_id=${ADM_SERVICE_UUID_URLENC}")

if grep -qF '"total":0' <<< "${existing_basic_auth_plugins}"; then
    # Enable the 'Basic Authentication' plugin on the Admin API Service
    curl -fsSL -X PUT -i \
        --cacert /var/vcap/jobs/kong/tls/admin_ca.crt \
        --url "${ADM_BASE_URI}/plugins" \
        --header "Content-Type: application/json" \
        --data-raw <%= sh_esc(js_esc({
                "name"   => "basic-auth",
                "config" => {
                    "hide_credentials" => true,
                },
                "service_id" => adm_service_uuid,
            })) %>
else
    # FIXME: using 'jq' is a must here
    plugin_uuid=$(sed -rne 's/^.*[{,]"id":"([0-9A-Fa-f-]+)"[},].*$/\1/p' <<< "${existing_basic_auth_plugins}")

    # Update the 'Basic Authentication' plugin on the Admin API Service
    curl -fsSL -X PATCH -i \
        --cacert /var/vcap/jobs/kong/tls/admin_ca.crt \
        --url "${ADM_BASE_URI}/plugins/${plugin_uuid}" \
        --header "Content-Type: application/json" \
        --data-raw <%= sh_esc(js_esc({
                "name"        => "basic-auth",
                "consumer_id" => nil,
                "service_id"  => adm_service_uuid,
                "route_id"    => nil,
                "config" => {
                    "hide_credentials" => true,
                },
                "enabled" => true,
            })) %>
fi

# Create or update the Consumer for the admin API
curl -fsSL -X PUT -i \
    --cacert /var/vcap/jobs/kong/tls/admin_ca.crt \
    --url "${ADM_BASE_URI}/consumers/${ADM_CONSUMER_UUID_URLENC}" \
    --header "Content-Type: application/json" \
    --data-raw <%= sh_esc(js_esc({
            "username" => adm_username,
        })) %>


# Create or update the basic auth Credential
if curl -fsSL -X GET \
    --cacert /var/vcap/jobs/kong/tls/admin_ca.crt \
    --url "${ADM_BASE_URI}/consumers/${ADM_CONSUMER_UUID_URLENC}/basic-auth/${ADM_CONSUMER_NAME_URLENC}" \
    --output /dev/null
then
    set +x # don't have the password leak into post-start logs
    curl -fsSL -X PATCH -i \
        --cacert /var/vcap/jobs/kong/tls/admin_ca.crt \
        --url "${ADM_BASE_URI}/consumers/${ADM_CONSUMER_UUID_URLENC}/basic-auth/${ADM_CONSUMER_NAME_URLENC}" \
        --header "Content-Type: application/json" \
        --data-raw <%= sh_esc(js_esc({
                "password" => adm_password,
            })) %> \
        --output /dev/null # don't leak the hashed password into post-start logs
    set -x
else
    set +x # don't have the password leak into post-start logs
    curl -fsSL -X POST -i \
        --cacert /var/vcap/jobs/kong/tls/admin_ca.crt \
        --url "${ADM_BASE_URI}/consumers/${ADM_CONSUMER_UUID_URLENC}/basic-auth" \
        --header "Content-Type: application/json" \
        --data-raw <%= sh_esc(js_esc({
                "username" => adm_username,
                "password" => adm_password,
            })) %> \
        --output /dev/null # don't leak the hashed password into post-start logs
    set -x
fi

<% end # spec.bootstrap -%>

exit 0
