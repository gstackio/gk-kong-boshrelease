#!/usr/bin/env bash
<%
    require "shellwords"
    def esc(x)
        Shellwords.shellescape(x)
    end

    adm_username = link("kong").p("admin.basic_auth.username")
    adm_password = link("kong").p("admin.basic_auth.password")
    adm_path = link("kong").p("admin.service.route_path")

    if link("kong").p("proxy.tls.enabled")
        pxy_scheme = "https"
        pxy_port = link("kong").p("proxy.tls.bind_port")
    else
        pxy_scheme = "http"
        pxy_port = link("kong").p("proxy.bind_port")
    end

    main_address = link("kong").instances.first.address
-%>

set -eo pipefail

function prepend_datetime() {
    awk -W interactive '{ system("echo -n [$(date +%FT%T%z)]"); print " " $0 }'
}

exec \
    3>&1 \
    1> >(prepend_datetime >&3) \
    2>&1

readonly ADM_BASE_URI=<%= esc("#{pxy_scheme}://#{main_address}:#{pxy_port}#{adm_path}") %>
readonly PXY_BASE_URI=<%= esc("#{pxy_scheme}://#{main_address}:#{pxy_port}") %>
readonly API_NAME=smoke-tests-mockbin-api

# setup cleanup framework
defer_stack=()
function defer() {
    local function_name=$1

    local new_stack=("${function_name}")
    new_stack+=("${defer_stack[@]}")

    defer_stack=("${new_stack[@]}")
}
function run_deferred() {
    for fn in "${defer_stack[@]}"; do
        "${fn}"
    done
}

trap run_deferred EXIT

# setup .netrc for curl to fetch the login name and password
export HOME=/var/vcap/data/smoke-tests/fake-home
mkdir -p "${HOME}"
touch "${HOME}/.netrc"
chmod 600 "${HOME}/.netrc" # restrict access before writing content
echo <%= esc("machine #{main_address} login #{adm_username} password #{adm_password}") %> \
    > "${HOME}/.netrc"

function cleanup_netrc() {
    rm -f "${HOME}/.netrc"
}
defer cleanup_netrc

function request() {
    local base=$1 verb=$2 uri_path=$3; shift 3

    curl -fsSL -X "${verb}" \
        --cacert /var/vcap/jobs/kong/tls/admin_ca.crt \
        --url "${base}${uri_path}" \
        "$@" \
        --include
}

function admin() {
    request "${ADM_BASE_URI}" "$@" --netrc
}

function proxy() {
    request "${PXY_BASE_URI}" "$@"
}

set -x

# query the 'info' endpoint
admin GET "/" \
    | tr -d '\r' | sed -e '/^$/,$d' # only display the HTTP response headers
echo $'\n'

function cleanup_api() {
    # delete the API
    admin DELETE "/apis/${API_NAME}"
}

cleanup_api || true # cleanup any stale API

# create an API
admin POST "/apis/" \
    --data "name=${API_NAME}" \
    --data "hosts=example.com" \
    --data "upstream_url=http://mockbin.org"
echo $'\n'

# delete API uppon exit
defer cleanup_api

# wait for the API to be created
sleep $((<%= esc(link("kong").p("datastore.db_update_frequency_in_sec")) %> + 1))

# get the created API
admin GET "/apis/${API_NAME}"
echo $'\n'

# send a request through the API
proxy GET "/" --header "Host: example.com" \
    | tr -d '\r' | sed -e '/^$/,$d' # only display the HTTP response headers
echo $'\n'


exit 0
