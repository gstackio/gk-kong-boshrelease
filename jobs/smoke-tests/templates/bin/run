#!/usr/bin/env bash
<%
    require "shellwords"
    def sh_esc(x)
        Shellwords.shellescape(x)
    end

    require "uri"
    def uri_esc(x)
        URI.encode_www_form_component(x)
    end

    require "json"
    def js_esc(x)
        x.to_json
    end

    adm_username = link("kong-admin").p("admin.basic_auth.username")
    adm_password = link("kong-admin").p("admin.basic_auth.password")
    adm_path = link("kong-admin").p("admin.service.route_path")
    adm_address = link("kong-admin").address

    # Notice: the Kong admin API is proxified with Basic-Auth on the Kong
    # proxy
    if link("kong-admin").p("proxy.tls.enabled")
        adm_scheme = "https"
        adm_port = link("kong-admin").p("proxy.tls.bind_port")
    else
        adm_scheme = "http"
        adm_port = link("kong-admin").p("proxy.bind_port")
    end

    if link("kong-proxy").p("proxy.tls.enabled")
        pxy_scheme = "https"
        pxy_port = link("kong-proxy").p("proxy.tls.bind_port")
    else
        pxy_scheme = "http"
        pxy_port = link("kong-proxy").p("proxy.bind_port")
    end
    pxy_address = link("kong-proxy").address

    require "securerandom"
    service_uuid = SecureRandom.uuid
    route_uuid = SecureRandom.uuid
-%>

set -eo pipefail

function prepend_datetime() {
    awk -W interactive '{ system("echo -n [$(date +%FT%TZ)]"); print " " $0 }'
}

exec \
    3>&1 \
    1> >(prepend_datetime >&3) \
    2>&1

source "/var/vcap/packages/jq-1.6-linux/runtime.env"

readonly ADM_BASE_URI=<%= sh_esc("#{adm_scheme}://#{adm_address}:#{adm_port}#{adm_path}") %>
readonly PXY_BASE_URI=<%= sh_esc("#{pxy_scheme}://#{pxy_address}:#{pxy_port}") %>
readonly SERVICE_UUID_URLENC=<%= sh_esc(uri_esc(service_uuid)) %>
readonly ROUTE_UUID_URLENC=<%= sh_esc(uri_esc(route_uuid)) %>

# setup cleanup framework
defer_stack=()
function defer() {
    local function_name=$1

    local new_stack=("${function_name}")
    new_stack+=("${defer_stack[@]}")

    defer_stack=("${new_stack[@]}")
}
function run_deferred() {
    set +e
    for fn in "${defer_stack[@]}"; do
        "${fn}"
    done
}

trap run_deferred EXIT

# setup .netrc for curl to fetch the login name and password
export HOME=/var/vcap/data/smoke-tests/fake-home
mkdir -p "${HOME}"
touch "${HOME}/.netrc"
chmod 600 "${HOME}/.netrc" # restrict access before writing content
echo <%= sh_esc("machine #{adm_address} login #{adm_username} password #{adm_password}") %> \
    > "${HOME}/.netrc"

function cleanup_netrc() {
    rm -f "${HOME}/.netrc"
}
defer cleanup_netrc

function request() {
    local base=$1 ca_name=$2 verb=$3 uri_path=$4; shift 4

    (
        set -x
        curl --silent --fail --show-error --location \
            --cacert "/var/vcap/jobs/smoke-tests/tls/${ca_name}.crt" \
            --request "${verb}" \
            --url "${base}${uri_path}" \
            --include \
            "$@"
    )
}

function admin() {
    local verb=$1 uri_path=$2; shift 2
    request "${ADM_BASE_URI}" "admin_ca" "${verb}" "${uri_path}" --netrc "$@"
}

function proxy() {
    request "${PXY_BASE_URI}" "proxy_ca" "$@"
}



failure="no"



# query the 'node informantion' endpoint
kong_info_response=$(admin GET "/" \
    | tr -d '\r')
sed -e '/^$/,$d' <<< "${kong_info_response}" # only display the HTTP response headers
echo $'\n'

kong_info=$(sed -e '1,/^$/d' <<< "${kong_info_response}")
jq '{ "tagline": .tagline, "version": .version, "node_id": .node_id, "hostname": .hostname }' \
    <<< "${kong_info}"
echo $'\n'



# query the 'node status' endpoint
kong_status_response=$(admin GET "/status" \
    | tr -d '\r')
sed -e '/^$/,$d' <<< "${kong_status_response}" # only display the HTTP response headers
echo $'\n'

kong_status=$(sed -e '1,/^$/d' <<< "${kong_status_response}")
jq '.' <<< "${kong_status}"
echo $'\n'

database_reachable=$(jq --raw-output '.database.reachable' <<< "${kong_status}")
if [[ ${database_reachable} != "true" ]]; then
    echo >&2 "ERROR: expected the database to be reachable in Kong status." \
        "Expected 'database.reachable' to be 'true' but was: '${database_reachable}'."
    failure="yes"
fi



function cleanup_service() {
    # delete the Service
    admin DELETE "/services/${SERVICE_UUID_URLENC}" | tr -d '\r'
}

cleanup_service || true # cleanup any stale Service

# create a backend Service
admin PUT "/services/${SERVICE_UUID_URLENC}" \
        --data "name=smoke-tests-service" \
        --data "url=https://mockbin.org" \
    | tr -d '\r'
echo $'\n'

# delete the created Service uppon exit
defer cleanup_service

# wait for the Service to be created
sleep $((<%= sh_esc(link("kong-proxy").p("datastore.db_update_frequency_in_sec")) %> + 1))

# get the created Service
admin GET "/services/${SERVICE_UUID_URLENC}" | tr -d '\r'
echo $'\n'


function cleanup_route() {
    # delete the Route
    admin DELETE "/routes/${ROUTE_UUID_URLENC}" | tr -d '\r'
}

cleanup_route || true # cleanup any stale Route

# create a backend Route
admin PUT "/routes/${ROUTE_UUID_URLENC}" \
        --data "name=smoke-tests-route" \
        --data "hosts=example.org" \
        --data "service.id=${SERVICE_UUID_URLENC}" \
    | tr -d '\r'
echo $'\n'

# delete the created Route uppon exit
defer cleanup_route

# wait for the Route to be created
sleep $((<%= sh_esc(link("kong-proxy").p("datastore.db_update_frequency_in_sec")) %> + 1))

# get the created Route
admin GET "/routes/${ROUTE_UUID_URLENC}" | tr -d '\r'
echo $'\n'


# send a request through the Route and Service
expected_payload='{"plip": "plop"}'
mockbin_response=$(proxy GET "/request?toto=titi&tata=tutu" \
        --header "Host: example.org" \
        --header "Content-Type: application/json" \
        --data-raw "${expected_payload}" \
    | tr -d '\r')
sed -e '/^$/,$d' <<< "${mockbin_esponse}" # only display the HTTP response headers
echo $'\n'

mockbin_body=$(sed -e '1,/^$/d' <<< "${mockbin_response}")
actual_payload=$(jq --raw-output '.postData.text' <<< "${mockbin_body}")
if [[ ${actual_payload} != ${expected_payload} ]]; then
    echo >&2 "ERROR: the returned paylaod from mockbin is different from the originally submitted paylaod." \
        "Expected '${expected_payload}' but was: '${actual_payload}'."
    failure="yes"
fi

actual_query_param1=$(jq --raw-output '.queryString.toto' <<< "${mockbin_body}")
if [[ ${actual_query_param1} != "titi" ]]; then
    echo >&2 "ERROR: the returned value for 'toto' query param from mockbin is different from the submitted value." \
        "Expected 'titi' but was: '${actual_query_param1}'."
    failure="yes"
fi

actual_query_param2=$(jq --raw-output '.queryString.tata' <<< "${mockbin_body}")
if [[ ${actual_query_param2} != "tutu" ]]; then
    echo >&2 "ERROR: the returned value for 'tata' query param from mockbin is different from the submitted value." \
        "Expected 'tutu' but was: '${actual_query_param2}'."
    failure="yes"
fi



redirect_plugin_available=$(jq --raw-output '.plugins.available_on_server.redirect' <<< "${kong_info}")
if [[ ${redirect_plugin_available} != "true" ]]; then
    echo "INFO: the 'redirect' plugin is not available in Kong. Skipping related smoke tests."
else
    echo "INFO: running 'redirect' plugin smoke tests..."

    # associate the 'redirect' plugin to the existing backend Service
    admin POST "/routes/${ROUTE_UUID_URLENC}/plugins" \
            --header "Content-Type: application/json" \
            --data-raw <%= sh_esc(js_esc({
                    "name"     => "redirect",
                    "config"   => {
                        "status_code" => 308,
                        "location" => "https://example.net/toto/titi",
                        "append_request_uri_to_location" => true,
                        "append_query_string_to_location" => true,
                    },
                })) %> \
        | tr -d '\r'
    echo $'\n'

    # wait for the Plugin to be activated
    sleep $((<%= sh_esc(link("kong-proxy").p("datastore.db_update_frequency_in_sec")) %> + 1))

    # send a request through the Route and Service
    response=$(proxy GET "/request?toto=titi&tata=tutu" \
            --no-location --no-fail --no-show-error \
            --header "Host: example.org" \
            --header "Content-Type: application/json" \
            --data-raw '{"plip": "plop"}' \
        | tr -d '\r')
    sed -e '/^$/,$d' <<< "${response}" # only display the HTTP response headers
    echo $'\n'

    actual_location=$(sed -e '/^$/,$d' <<< "${response}" | awk -F": " 'tolower($0) ~ /^location:/ {print $2}')
    expected_location="https://example.net/toto/titi/request?toto=titi&tata=tutu"
    if [[ ${actual_location} != ${expected_location} ]]; then
        echo >&2 "ERROR: expected the 'Location' header" \
            "to be '${expected_location}'," \
            "but was '${actual_location}'"
        failure="yes"
    fi

    actual_body=$(sed -e '1,/^$/d' <<< "${response}")
    expected_body='{"message":"Permanent Redirect"}'
    if [[ ${actual_body} != ${expected_body} ]]; then
        echo >&2 "ERROR: expected the response body" \
            "to be '${expected_body}'," \
            "but was '${actual_body}'"
        failure="yes"
    fi

fi


if [[ ${failure} == "yes" ]]; then
    exit 1
fi

exit 0
